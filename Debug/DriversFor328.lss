
DriversFor328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000086c  00000900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800114  00800114  00000914  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c60  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f57  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000119a  00000000  00000000  00004767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  00005904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ddc  00000000  00000000  00005e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a32  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000865a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	4a 03       	fmul	r20, r18

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ec e6       	ldi	r30, 0x6C	; 108
  7e:	f8 e0       	ldi	r31, 0x08	; 8
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a4 31       	cpi	r26, 0x14	; 20
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a4 e1       	ldi	r26, 0x14	; 20
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 32       	cpi	r26, 0x24	; 36
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 2e 04 	call	0x85c	; 0x85c <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 48 03 	call	0x690	; 0x690 <main>
  b6:	0c 94 34 04 	jmp	0x868	; 0x868 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z11KPReadStateR11GPIOManagerhh>:
	Gpio.DigitalOutput(PB4,LOW,'b');
	return;
}

void HandleNoInput(KeyPadState& keypadstate)
{
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	8c 01       	movw	r16, r24
  cc:	f6 2e       	mov	r15, r22
  ce:	d4 2f       	mov	r29, r20
  d0:	e1 2c       	mov	r14, r1
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	8e 15       	cp	r24, r14
  d6:	88 f1       	brcs	.+98     	; 0x13a <_Z11KPReadStateR11GPIOManagerhh+0x7c>
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	c4 30       	cpi	r28, 0x04	; 4
  dc:	80 f4       	brcc	.+32     	; 0xfe <_Z11KPReadStateR11GPIOManagerhh+0x40>
  de:	6c 2f       	mov	r22, r28
  e0:	6f 0d       	add	r22, r15
  e2:	24 e6       	ldi	r18, 0x64	; 100
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	c8 01       	movw	r24, r16
  e8:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
  ec:	6c 2f       	mov	r22, r28
  ee:	6d 0f       	add	r22, r29
  f0:	24 e6       	ldi	r18, 0x64	; 100
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	c8 01       	movw	r24, r16
  f6:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
  fa:	cf 5f       	subi	r28, 0xFF	; 255
  fc:	ee cf       	rjmp	.-36     	; 0xda <_Z11KPReadStateR11GPIOManagerhh+0x1c>
  fe:	24 e6       	ldi	r18, 0x64	; 100
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	6e 2d       	mov	r22, r14
 104:	6f 0d       	add	r22, r15
 106:	c8 01       	movw	r24, r16
 108:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z5Delayj>
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	c4 30       	cpi	r28, 0x04	; 4
 118:	70 f4       	brcc	.+28     	; 0x136 <_Z11KPReadStateR11GPIOManagerhh+0x78>
 11a:	44 e6       	ldi	r20, 0x64	; 100
 11c:	6c 2f       	mov	r22, r28
 11e:	6d 0f       	add	r22, r29
 120:	c8 01       	movw	r24, r16
 122:	0e 94 48 02 	call	0x490	; 0x490 <_ZN11GPIOManager11DigitalReadEhc>
 126:	81 11       	cpse	r24, r1
 128:	04 c0       	rjmp	.+8      	; 0x132 <_Z11KPReadStateR11GPIOManagerhh+0x74>
 12a:	6e 2d       	mov	r22, r14
 12c:	7c 2f       	mov	r23, r28
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	07 c0       	rjmp	.+14     	; 0x140 <_Z11KPReadStateR11GPIOManagerhh+0x82>
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	f0 cf       	rjmp	.-32     	; 0x116 <_Z11KPReadStateR11GPIOManagerhh+0x58>
 136:	e3 94       	inc	r14
 138:	cc cf       	rjmp	.-104    	; 0xd2 <_Z11KPReadStateR11GPIOManagerhh+0x14>
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	08 95       	ret

0000014e <_Z12WaitForInputR11GPIOManager12KeypadResultRc>:
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
 15e:	d4 2f       	mov	r29, r20
 160:	d5 2e       	mov	r13, r21
 162:	c6 2f       	mov	r28, r22
 164:	79 01       	movw	r14, r18
 166:	c1 11       	cpse	r28, r1
 168:	0d c0       	rjmp	.+26     	; 0x184 <_Z12WaitForInputR11GPIOManager12KeypadResultRc+0x36>
 16a:	44 e0       	ldi	r20, 0x04	; 4
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	c8 01       	movw	r24, r16
 170:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11KPReadStateR11GPIOManagerhh>
 174:	d6 2f       	mov	r29, r22
 176:	d7 2e       	mov	r13, r23
 178:	c8 2f       	mov	r28, r24
 17a:	82 e3       	ldi	r24, 0x32	; 50
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z5Delayj>
 182:	f1 cf       	rjmp	.-30     	; 0x166 <_Z12WaitForInputR11GPIOManager12KeypadResultRc+0x18>
 184:	ed 2f       	mov	r30, r29
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	ed 0d       	add	r30, r13
 196:	f1 1d       	adc	r31, r1
 198:	80 81       	ld	r24, Z
 19a:	f7 01       	movw	r30, r14
 19c:	80 83       	st	Z, r24
 19e:	cc 23       	and	r28, r28
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <_Z12WaitForInputR11GPIOManager12KeypadResultRc+0x6a>
 1a2:	44 e0       	ldi	r20, 0x04	; 4
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	c8 01       	movw	r24, r16
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11KPReadStateR11GPIOManagerhh>
 1ac:	c8 2f       	mov	r28, r24
 1ae:	8a e0       	ldi	r24, 0x0A	; 10
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z5Delayj>
 1b6:	f3 cf       	rjmp	.-26     	; 0x19e <_Z12WaitForInputR11GPIOManager12KeypadResultRc+0x50>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	08 95       	ret

000001c8 <_Z15InitKeyPadStateR11KeyPadState>:
 1c8:	dc 01       	movw	r26, r24
 1ca:	1c 92       	st	X, r1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	94 30       	cpi	r25, 0x04	; 4
 1d0:	30 f4       	brcc	.+12     	; 0x1de <_Z15InitKeyPadStateR11KeyPadState+0x16>
 1d2:	fd 01       	movw	r30, r26
 1d4:	e9 0f       	add	r30, r25
 1d6:	f1 1d       	adc	r31, r1
 1d8:	11 82       	std	Z+1, r1	; 0x01
 1da:	9f 5f       	subi	r25, 0xFF	; 255
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <_Z15InitKeyPadStateR11KeyPadState+0x6>
 1de:	08 95       	ret

000001e0 <_Z16HandleResetInputR11KeyPadStateR11GPIOManager>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	eb 01       	movw	r28, r22
 1e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z15InitKeyPadStateR11KeyPadState>
 1ea:	40 ed       	ldi	r20, 0xD0	; 208
 1ec:	be 01       	movw	r22, r28
 1ee:	84 e6       	ldi	r24, 0x64	; 100
 1f0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z9PlaySoundhR11GPIOManagerh>
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <_Z15HandleTryAccessR11KeyPadStatePKcR12CurrentState>:
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	dc 01       	movw	r26, r24
 200:	ea 01       	movw	r28, r20
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	94 30       	cpi	r25, 0x04	; 4
 206:	88 f4       	brcc	.+34     	; 0x22a <_Z15HandleTryAccessR11KeyPadStatePKcR12CurrentState+0x30>
 208:	29 2f       	mov	r18, r25
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	fd 01       	movw	r30, r26
 20e:	e2 0f       	add	r30, r18
 210:	f3 1f       	adc	r31, r19
 212:	51 81       	ldd	r21, Z+1	; 0x01
 214:	fb 01       	movw	r30, r22
 216:	e2 0f       	add	r30, r18
 218:	f3 1f       	adc	r31, r19
 21a:	20 81       	ld	r18, Z
 21c:	52 17       	cp	r21, r18
 21e:	19 f0       	breq	.+6      	; 0x226 <_Z15HandleTryAccessR11KeyPadStatePKcR12CurrentState+0x2c>
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	88 83       	st	Y, r24
 224:	04 c0       	rjmp	.+8      	; 0x22e <_Z15HandleTryAccessR11KeyPadStatePKcR12CurrentState+0x34>
 226:	9f 5f       	subi	r25, 0xFF	; 255
 228:	ed cf       	rjmp	.-38     	; 0x204 <_Z15HandleTryAccessR11KeyPadStatePKcR12CurrentState+0xa>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	88 83       	st	Y, r24
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <_Z17HandleGrandAccessR11KeyPadStateR11GPIOManager>:
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	eb 01       	movw	r28, r22
 23a:	48 ee       	ldi	r20, 0xE8	; 232
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z9PlaySoundhR11GPIOManagerh>
 242:	22 e6       	ldi	r18, 0x62	; 98
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	ce 01       	movw	r24, r28
 24a:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	97 e2       	ldi	r25, 0x27	; 39
 252:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z5Delayj>
 256:	22 e6       	ldi	r18, 0x62	; 98
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	64 e0       	ldi	r22, 0x04	; 4
 25c:	ce 01       	movw	r24, r28
 25e:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <_Z16HandleDenyAccessR11KeyPadStateR11GPIOManager>:
	return; 
}

void HandleDenyAccess(KeyPadState& keypadstate,GPIOManager& Gpio)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	eb 01       	movw	r28, r22
		Gpio.DigitalOutput(PB0,HIGH,'b');
 26e:	22 e6       	ldi	r18, 0x62	; 98
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	ce 01       	movw	r24, r28
 276:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
		Delay(10000);
 27a:	80 e1       	ldi	r24, 0x10	; 16
 27c:	97 e2       	ldi	r25, 0x27	; 39
 27e:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z5Delayj>
		Gpio.DigitalOutput(PB0,LOW,'b');
 282:	22 e6       	ldi	r18, 0x62	; 98
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	ce 01       	movw	r24, r28
 28a:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
	return;
	//Clear LCD 
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <_Z22HandleEnterInputNumberR11KeyPadStatecR11GPIOManager>:

void HandleEnterInputNumber(KeyPadState& keypadstate,char key,GPIOManager& Gpio)
{
 294:	fc 01       	movw	r30, r24
	   keypadstate.CurrentNumInput[keypadstate.currentIndex] = key;
 296:	90 81       	ld	r25, Z
 298:	df 01       	movw	r26, r30
 29a:	a9 0f       	add	r26, r25
 29c:	b1 1d       	adc	r27, r1
 29e:	11 96       	adiw	r26, 0x01	; 1
 2a0:	6c 93       	st	X, r22
	   keypadstate.currentIndex++;
 2a2:	9f 5f       	subi	r25, 0xFF	; 255
 2a4:	90 83       	st	Z, r25
 2a6:	08 95       	ret

000002a8 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager>:
}
void HandleState(CurrentState state,char& InputFromUser,const char PASSWORD[],KeyPadState& keypadstate,GPIOManager& Gpio)
{
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	1f 92       	push	r1
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	89 83       	std	Y+1, r24	; 0x01
 2bc:	fa 01       	movw	r30, r20
 2be:	79 01       	movw	r14, r18
	switch(state)
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	f1 f0       	breq	.+60     	; 0x300 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x58>
 2c4:	84 30       	cpi	r24, 0x04	; 4
 2c6:	09 f1       	breq	.+66     	; 0x30a <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x62>
 2c8:	81 11       	cpse	r24, r1
 2ca:	25 c0       	rjmp	.+74     	; 0x316 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x6e>
	{
		case NO_INPUT:
		HandleNoInput(keypadstate);
		break;
		case TRY_ACCESS: //function will determine if its granted or denied (should fall down no break guaranteed to either be deny or grant)
		HandleTryAccess(keypadstate,PASSWORD,state);
 2cc:	ae 01       	movw	r20, r28
 2ce:	4f 5f       	subi	r20, 0xFF	; 255
 2d0:	5f 4f       	sbci	r21, 0xFF	; 255
 2d2:	bf 01       	movw	r22, r30
 2d4:	c9 01       	movw	r24, r18
 2d6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z15HandleTryAccessR11KeyPadStatePKcR12CurrentState>
		if(state == DENY_ACCESS)
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	29 f4       	brne	.+10     	; 0x2ea <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x42>
		{
		   HandleDenyAccess(keypadstate,Gpio);
 2e0:	b8 01       	movw	r22, r16
 2e2:	c7 01       	movw	r24, r14
 2e4:	0e 94 34 01 	call	0x268	; 0x268 <_Z16HandleDenyAccessR11KeyPadStateR11GPIOManager>
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x4e>
		}
		else if(state == GRANT_ACCESS)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x4e>
		{
			HandleGrandAccess(keypadstate,Gpio);
 2ee:	b8 01       	movw	r22, r16
 2f0:	c7 01       	movw	r24, r14
 2f2:	0e 94 1a 01 	call	0x234	; 0x234 <_Z17HandleGrandAccessR11KeyPadStateR11GPIOManager>
		}
		HandleResetInput(keypadstate,Gpio);
 2f6:	b8 01       	movw	r22, r16
 2f8:	c7 01       	movw	r24, r14
 2fa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z16HandleResetInputR11KeyPadStateR11GPIOManager>
		break;
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x6e>
		case RESET_INPUT:
		HandleResetInput(keypadstate,Gpio);
 300:	b8 01       	movw	r22, r16
 302:	c9 01       	movw	r24, r18
 304:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z16HandleResetInputR11KeyPadStateR11GPIOManager>
		break;
 308:	06 c0       	rjmp	.+12     	; 0x316 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager+0x6e>
		case ENTER_INPUT_NUMBER:
		HandleEnterInputNumber(keypadstate,InputFromUser,Gpio);
 30a:	fb 01       	movw	r30, r22
 30c:	60 81       	ld	r22, Z
 30e:	a8 01       	movw	r20, r16
 310:	c9 01       	movw	r24, r18
 312:	0e 94 4a 01 	call	0x294	; 0x294 <_Z22HandleEnterInputNumberR11KeyPadStatecR11GPIOManager>
		break;
	}
 316:	0f 90       	pop	r0
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	08 95       	ret

00000326 <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager>:
		//wait for release
	}
}

void AssignState(CurrentState& state,char& InputFromUser,KeyPadState& keypadstate,const char PASSWORD[],GPIOManager& Gpio)
{
 326:	af 92       	push	r10
 328:	bf 92       	push	r11
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	7c 01       	movw	r14, r24
 33c:	eb 01       	movw	r28, r22
 33e:	6a 01       	movw	r12, r20
 340:	59 01       	movw	r10, r18
   if(InputFromUser == '\0')
 342:	88 81       	ld	r24, Y
 344:	81 11       	cpse	r24, r1
 346:	03 c0       	rjmp	.+6      	; 0x34e <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager+0x28>
   {
	   state = NO_INPUT;
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	f7 01       	movw	r30, r14
 34c:	80 83       	st	Z, r24
   }
   if(InputFromUser == '#' && keypadstate.currentIndex >= 3)
 34e:	88 81       	ld	r24, Y
 350:	83 32       	cpi	r24, 0x23	; 35
 352:	31 f4       	brne	.+12     	; 0x360 <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager+0x3a>
 354:	f6 01       	movw	r30, r12
 356:	80 81       	ld	r24, Z
 358:	83 30       	cpi	r24, 0x03	; 3
 35a:	10 f0       	brcs	.+4      	; 0x360 <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager+0x3a>
   {
	   
	   state = TRY_ACCESS;
 35c:	f7 01       	movw	r30, r14
 35e:	10 82       	st	Z, r1
	   //state machine will split into GRANT or DENY ACCESS
   }
   if(InputFromUser == '*')
 360:	88 81       	ld	r24, Y
 362:	8a 32       	cpi	r24, 0x2A	; 42
 364:	19 f4       	brne	.+6      	; 0x36c <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager+0x46>
   {
	   state = RESET_INPUT;
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	f7 01       	movw	r30, r14
 36a:	80 83       	st	Z, r24
   }
   if(InputFromUser >= 48 && InputFromUser <= 57 && keypadstate.currentIndex < 4)  //from 0 to 9 in ASCII dec table
 36c:	88 81       	ld	r24, Y
 36e:	80 53       	subi	r24, 0x30	; 48
 370:	8a 30       	cpi	r24, 0x0A	; 10
 372:	60 f4       	brcc	.+24     	; 0x38c <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager+0x66>
 374:	f6 01       	movw	r30, r12
 376:	80 81       	ld	r24, Z
 378:	84 30       	cpi	r24, 0x04	; 4
 37a:	40 f4       	brcc	.+16     	; 0x38c <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager+0x66>
   {
	   PlaySound(250,Gpio,1000);
 37c:	48 ee       	ldi	r20, 0xE8	; 232
 37e:	b8 01       	movw	r22, r16
 380:	8a ef       	ldi	r24, 0xFA	; 250
 382:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z9PlaySoundhR11GPIOManagerh>
	   state = ENTER_INPUT_NUMBER;	
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	f7 01       	movw	r30, r14
 38a:	80 83       	st	Z, r24
   }
    HandleState(state,InputFromUser,PASSWORD,keypadstate,Gpio);
 38c:	96 01       	movw	r18, r12
 38e:	a5 01       	movw	r20, r10
 390:	be 01       	movw	r22, r28
 392:	f7 01       	movw	r30, r14
 394:	80 81       	ld	r24, Z
 396:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z11HandleState12CurrentStateRcPKcR11KeyPadStateR11GPIOManager>
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	08 95       	ret

000003b0 <_ZN11GPIOManager6SetDirEhhc>:
  {
	  OCR2A  = pulsewidthmodulation;
  }
  else if (AB == 'B' || AB == 'b')
  {
	  OCR2B = pulsewidthmodulation;
 3b0:	68 30       	cpi	r22, 0x08	; 8
 3b2:	b8 f5       	brcc	.+110    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3b4:	42 30       	cpi	r20, 0x02	; 2
 3b6:	a8 f5       	brcc	.+106    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3b8:	24 34       	cpi	r18, 0x44	; 68
 3ba:	11 f0       	breq	.+4      	; 0x3c0 <_ZN11GPIOManager6SetDirEhhc+0x10>
 3bc:	24 36       	cpi	r18, 0x64	; 100
 3be:	71 f4       	brne	.+28     	; 0x3dc <_ZN11GPIOManager6SetDirEhhc+0x2c>
 3c0:	41 11       	cpse	r20, r1
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <_ZN11GPIOManager6SetDirEhhc+0x1e>
 3c4:	8a b1       	in	r24, 0x0a	; 10
 3c6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z8ClearBithh>
 3ca:	8a b9       	out	0x0a, r24	; 10
 3cc:	08 95       	ret
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	41 f5       	brne	.+80     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3d2:	8a b1       	in	r24, 0x0a	; 10
 3d4:	0e 94 03 04 	call	0x806	; 0x806 <_Z6SetBithh>
 3d8:	8a b9       	out	0x0a, r24	; 10
 3da:	08 95       	ret
 3dc:	23 34       	cpi	r18, 0x43	; 67
 3de:	11 f0       	breq	.+4      	; 0x3e4 <_ZN11GPIOManager6SetDirEhhc+0x34>
 3e0:	23 36       	cpi	r18, 0x63	; 99
 3e2:	71 f4       	brne	.+28     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e4:	41 11       	cpse	r20, r1
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <_ZN11GPIOManager6SetDirEhhc+0x42>
 3e8:	87 b1       	in	r24, 0x07	; 7
 3ea:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z8ClearBithh>
 3ee:	87 b9       	out	0x07, r24	; 7
 3f0:	08 95       	ret
 3f2:	41 30       	cpi	r20, 0x01	; 1
 3f4:	b1 f4       	brne	.+44     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f6:	87 b1       	in	r24, 0x07	; 7
 3f8:	0e 94 03 04 	call	0x806	; 0x806 <_Z6SetBithh>
 3fc:	87 b9       	out	0x07, r24	; 7
 3fe:	08 95       	ret
 400:	22 34       	cpi	r18, 0x42	; 66
 402:	11 f0       	breq	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	22 36       	cpi	r18, 0x62	; 98
 406:	69 f4       	brne	.+26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 408:	41 11       	cpse	r20, r1
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40c:	84 b1       	in	r24, 0x04	; 4
 40e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z8ClearBithh>
 412:	84 b9       	out	0x04, r24	; 4
 414:	08 95       	ret
 416:	41 30       	cpi	r20, 0x01	; 1
 418:	21 f4       	brne	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41a:	84 b1       	in	r24, 0x04	; 4
 41c:	0e 94 03 04 	call	0x806	; 0x806 <_Z6SetBithh>
 420:	84 b9       	out	0x04, r24	; 4
 422:	08 95       	ret

00000424 <_ZN11GPIOManager13DigitalOutputEhhc>:
 424:	68 30       	cpi	r22, 0x08	; 8
 426:	98 f5       	brcc	.+102    	; 0x48e <_ZN11GPIOManager13DigitalOutputEhhc+0x6a>
 428:	24 34       	cpi	r18, 0x44	; 68
 42a:	11 f0       	breq	.+4      	; 0x430 <_ZN11GPIOManager13DigitalOutputEhhc+0xc>
 42c:	24 36       	cpi	r18, 0x64	; 100
 42e:	71 f4       	brne	.+28     	; 0x44c <_ZN11GPIOManager13DigitalOutputEhhc+0x28>
 430:	41 30       	cpi	r20, 0x01	; 1
 432:	29 f4       	brne	.+10     	; 0x43e <_ZN11GPIOManager13DigitalOutputEhhc+0x1a>
 434:	8b b1       	in	r24, 0x0b	; 11
 436:	0e 94 03 04 	call	0x806	; 0x806 <_Z6SetBithh>
 43a:	8b b9       	out	0x0b, r24	; 11
 43c:	08 95       	ret
 43e:	41 11       	cpse	r20, r1
 440:	26 c0       	rjmp	.+76     	; 0x48e <_ZN11GPIOManager13DigitalOutputEhhc+0x6a>
 442:	8b b1       	in	r24, 0x0b	; 11
 444:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z8ClearBithh>
 448:	8b b9       	out	0x0b, r24	; 11
 44a:	08 95       	ret
 44c:	22 34       	cpi	r18, 0x42	; 66
 44e:	11 f0       	breq	.+4      	; 0x454 <_ZN11GPIOManager13DigitalOutputEhhc+0x30>
 450:	22 36       	cpi	r18, 0x62	; 98
 452:	71 f4       	brne	.+28     	; 0x470 <_ZN11GPIOManager13DigitalOutputEhhc+0x4c>
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	29 f4       	brne	.+10     	; 0x462 <_ZN11GPIOManager13DigitalOutputEhhc+0x3e>
 458:	85 b1       	in	r24, 0x05	; 5
 45a:	0e 94 03 04 	call	0x806	; 0x806 <_Z6SetBithh>
 45e:	85 b9       	out	0x05, r24	; 5
 460:	08 95       	ret
 462:	41 11       	cpse	r20, r1
 464:	14 c0       	rjmp	.+40     	; 0x48e <_ZN11GPIOManager13DigitalOutputEhhc+0x6a>
 466:	85 b1       	in	r24, 0x05	; 5
 468:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z8ClearBithh>
 46c:	85 b9       	out	0x05, r24	; 5
 46e:	08 95       	ret
 470:	23 34       	cpi	r18, 0x43	; 67
 472:	69 f4       	brne	.+26     	; 0x48e <_ZN11GPIOManager13DigitalOutputEhhc+0x6a>
 474:	41 30       	cpi	r20, 0x01	; 1
 476:	29 f4       	brne	.+10     	; 0x482 <_ZN11GPIOManager13DigitalOutputEhhc+0x5e>
 478:	88 b1       	in	r24, 0x08	; 8
 47a:	0e 94 03 04 	call	0x806	; 0x806 <_Z6SetBithh>
 47e:	88 b9       	out	0x08, r24	; 8
 480:	08 95       	ret
 482:	41 11       	cpse	r20, r1
 484:	04 c0       	rjmp	.+8      	; 0x48e <_ZN11GPIOManager13DigitalOutputEhhc+0x6a>
 486:	88 b1       	in	r24, 0x08	; 8
 488:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z8ClearBithh>
 48c:	88 b9       	out	0x08, r24	; 8
 48e:	08 95       	ret

00000490 <_ZN11GPIOManager11DigitalReadEhc>:
 490:	68 30       	cpi	r22, 0x08	; 8
 492:	10 f5       	brcc	.+68     	; 0x4d8 <_ZN11GPIOManager11DigitalReadEhc+0x48>
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <_ZN11GPIOManager11DigitalReadEhc+0xe>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <_ZN11GPIOManager11DigitalReadEhc+0xa>
 4a2:	44 34       	cpi	r20, 0x44	; 68
 4a4:	11 f0       	breq	.+4      	; 0x4aa <_ZN11GPIOManager11DigitalReadEhc+0x1a>
 4a6:	44 36       	cpi	r20, 0x64	; 100
 4a8:	29 f4       	brne	.+10     	; 0x4b4 <_ZN11GPIOManager11DigitalReadEhc+0x24>
 4aa:	99 b1       	in	r25, 0x09	; 9
 4ac:	89 23       	and	r24, r25
 4ae:	b1 f0       	breq	.+44     	; 0x4dc <_ZN11GPIOManager11DigitalReadEhc+0x4c>
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	08 95       	ret
 4b4:	42 34       	cpi	r20, 0x42	; 66
 4b6:	11 f0       	breq	.+4      	; 0x4bc <_ZN11GPIOManager11DigitalReadEhc+0x2c>
 4b8:	42 36       	cpi	r20, 0x62	; 98
 4ba:	29 f4       	brne	.+10     	; 0x4c6 <_ZN11GPIOManager11DigitalReadEhc+0x36>
 4bc:	93 b1       	in	r25, 0x03	; 3
 4be:	89 23       	and	r24, r25
 4c0:	79 f0       	breq	.+30     	; 0x4e0 <_ZN11GPIOManager11DigitalReadEhc+0x50>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
 4c6:	43 34       	cpi	r20, 0x43	; 67
 4c8:	11 f0       	breq	.+4      	; 0x4ce <_ZN11GPIOManager11DigitalReadEhc+0x3e>
 4ca:	43 36       	cpi	r20, 0x63	; 99
 4cc:	59 f4       	brne	.+22     	; 0x4e4 <_ZN11GPIOManager11DigitalReadEhc+0x54>
 4ce:	96 b1       	in	r25, 0x06	; 6
 4d0:	89 23       	and	r24, r25
 4d2:	51 f0       	breq	.+20     	; 0x4e8 <_ZN11GPIOManager11DigitalReadEhc+0x58>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	08 95       	ret
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret

000004ec <_ZN11GPIOManager13SetClockSpeedEhhh>:
  }
}

void GPIOManager::SetClockSpeed(UINT8 bit0, UINT8 bit1, UINT8 bit2)
{
	if(bit0 > 1 || bit1 > 1 || bit2 > 1 )return; 
 4ec:	62 30       	cpi	r22, 0x02	; 2
 4ee:	b8 f4       	brcc	.+46     	; 0x51e <_ZN11GPIOManager13SetClockSpeedEhhh+0x32>
 4f0:	42 30       	cpi	r20, 0x02	; 2
 4f2:	a8 f4       	brcc	.+42     	; 0x51e <_ZN11GPIOManager13SetClockSpeedEhhh+0x32>
 4f4:	22 30       	cpi	r18, 0x02	; 2
 4f6:	98 f4       	brcc	.+38     	; 0x51e <_ZN11GPIOManager13SetClockSpeedEhhh+0x32>
	ADCSRA |= (bit0 << ADPS0);
 4f8:	ea e7       	ldi	r30, 0x7A	; 122
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	68 2b       	or	r22, r24
 500:	60 83       	st	Z, r22
	ADCSRA |= (bit1 << ADPS1);
 502:	80 81       	ld	r24, Z
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	48 2b       	or	r20, r24
 50c:	40 83       	st	Z, r20
	ADCSRA |= (bit2 << ADPS2);
 50e:	80 81       	ld	r24, Z
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	22 0f       	add	r18, r18
 514:	33 1f       	adc	r19, r19
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	28 2b       	or	r18, r24
 51c:	20 83       	st	Z, r18
 51e:	08 95       	ret

00000520 <_ZN11GPIOManagerC1Ev>:
#include "globals.h"
#include "utils.h"
#include "Timers.h"
GPIOManager::GPIOManager()
{
	SetClockSpeed(1,1,1);
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN11GPIOManager13SetClockSpeedEhhh>
	 ADCSRA |= (1 << ADEN); 
 52a:	ea e7       	ldi	r30, 0x7A	; 122
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	80 68       	ori	r24, 0x80	; 128
 532:	80 83       	st	Z, r24
	Timer0Init();
 534:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_Z10Timer0Initv>
	Timer2Init();
 538:	0e 94 b1 03 	call	0x762	; 0x762 <_Z10Timer2Initv>
 53c:	08 95       	ret

0000053e <__vector_16>:
	ADCSRA |= (bit1 << ADPS1);
	ADCSRA |= (bit2 << ADPS2);
}

ISR(TIMER0_OVF_vect)
{
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
	timeoverflowstack++;
 550:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timeoverflowstack>
 554:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timeoverflowstack+0x1>
 558:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <timeoverflowstack+0x2>
 55c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <timeoverflowstack+0x3>
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	a1 1d       	adc	r26, r1
 564:	b1 1d       	adc	r27, r1
 566:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timeoverflowstack>
 56a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <timeoverflowstack+0x1>
 56e:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <timeoverflowstack+0x2>
 572:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <timeoverflowstack+0x3>
}
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <_Z41__static_initialization_and_destruction_0ii>:


int main()
{
	Entry();
}
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	39 f4       	brne	.+14     	; 0x59a <_Z41__static_initialization_and_destruction_0ii+0x12>
 58c:	6f 3f       	cpi	r22, 0xFF	; 255
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	21 f4       	brne	.+8      	; 0x59a <_Z41__static_initialization_and_destruction_0ii+0x12>
#include "PBuzzer.h"
#include "4X4Keypad.h"
#include "Timers.h"

//KeyPad Demo 
GPIOManager  Gpio;
 592:	83 e2       	ldi	r24, 0x23	; 35
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 90 02 	call	0x520	; 0x520 <_ZN11GPIOManagerC1Ev>
 59a:	08 95       	ret

0000059c <_Z5SetUpv>:
KeypadResult KPResult;
char KPInput;
	
void SetUp()
{
	InitKeyPadState(KPstate);
 59c:	8e e1       	ldi	r24, 0x1E	; 30
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z15InitKeyPadStateR11KeyPadState>
	KPResult.isPressed = false;
 5a4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <KPResult+0x2>
	
	Gpio.SetDir(PB4,OUTPUT,'b');
 5a8:	22 e6       	ldi	r18, 0x62	; 98
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	64 e0       	ldi	r22, 0x04	; 4
 5ae:	83 e2       	ldi	r24, 0x23	; 35
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	//LED
	Gpio.SetDir(PB0,OUTPUT,'b');
 5b6:	22 e6       	ldi	r18, 0x62	; 98
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	83 e2       	ldi	r24, 0x23	; 35
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	//Passive Buzzer
	Gpio.SetDir(PB3,OUTPUT,'b');
 5c4:	22 e6       	ldi	r18, 0x62	; 98
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	83 e2       	ldi	r24, 0x23	; 35
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	Gpio.DigitalOutput(PB3,LOW,'b');
 5d2:	22 e6       	ldi	r18, 0x62	; 98
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	63 e0       	ldi	r22, 0x03	; 3
 5d8:	83 e2       	ldi	r24, 0x23	; 35
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 12 02 	call	0x424	; 0x424 <_ZN11GPIOManager13DigitalOutputEhhc>
	//Rows
	Gpio.SetDir(PD0,OUTPUT,'d');
 5e0:	24 e6       	ldi	r18, 0x64	; 100
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	83 e2       	ldi	r24, 0x23	; 35
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	Gpio.SetDir(PD1,OUTPUT,'d');
 5ee:	24 e6       	ldi	r18, 0x64	; 100
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	83 e2       	ldi	r24, 0x23	; 35
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	Gpio.SetDir(PD2,OUTPUT,'d');
 5fc:	24 e6       	ldi	r18, 0x64	; 100
 5fe:	41 e0       	ldi	r20, 0x01	; 1
 600:	62 e0       	ldi	r22, 0x02	; 2
 602:	83 e2       	ldi	r24, 0x23	; 35
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	Gpio.SetDir(PD3,OUTPUT,'d');
 60a:	24 e6       	ldi	r18, 0x64	; 100
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	63 e0       	ldi	r22, 0x03	; 3
 610:	83 e2       	ldi	r24, 0x23	; 35
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	//Columns
	Gpio.SetDir(PD4,INPUT,'d');
 618:	24 e6       	ldi	r18, 0x64	; 100
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	64 e0       	ldi	r22, 0x04	; 4
 61e:	83 e2       	ldi	r24, 0x23	; 35
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	Gpio.SetDir(PD5,INPUT,'d');
 626:	24 e6       	ldi	r18, 0x64	; 100
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	65 e0       	ldi	r22, 0x05	; 5
 62c:	83 e2       	ldi	r24, 0x23	; 35
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	Gpio.SetDir(PD6,INPUT,'d');
 634:	24 e6       	ldi	r18, 0x64	; 100
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	66 e0       	ldi	r22, 0x06	; 6
 63a:	83 e2       	ldi	r24, 0x23	; 35
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
	Gpio.SetDir(PD7,INPUT,'d');
 642:	24 e6       	ldi	r18, 0x64	; 100
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	67 e0       	ldi	r22, 0x07	; 7
 648:	83 e2       	ldi	r24, 0x23	; 35
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <_ZN11GPIOManager6SetDirEhhc>
 650:	08 95       	ret

00000652 <_Z5Entryv>:
}

void Entry()
{
	SetUp();
 652:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z5SetUpv>
	while(1)
	{
		WaitForInput(Gpio,KPResult,KPInput);		
 656:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <KPResult>
 65a:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <KPResult+0x1>
 65e:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <KPResult+0x2>
 662:	29 e1       	ldi	r18, 0x19	; 25
 664:	31 e0       	ldi	r19, 0x01	; 1
 666:	83 e2       	ldi	r24, 0x23	; 35
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z12WaitForInputR11GPIOManager12KeypadResultRc>
		AssignState(KPcurrentState,KPInput,KPstate,password1234,Gpio);
 66e:	03 e2       	ldi	r16, 0x23	; 35
 670:	11 e0       	ldi	r17, 0x01	; 1
 672:	20 e1       	ldi	r18, 0x10	; 16
 674:	31 e0       	ldi	r19, 0x01	; 1
 676:	4e e1       	ldi	r20, 0x1E	; 30
 678:	51 e0       	ldi	r21, 0x01	; 1
 67a:	69 e1       	ldi	r22, 0x19	; 25
 67c:	71 e0       	ldi	r23, 0x01	; 1
 67e:	8d e1       	ldi	r24, 0x1D	; 29
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 93 01 	call	0x326	; 0x326 <_Z11AssignStateR12CurrentStateRcR11KeyPadStatePKcR11GPIOManager>
		Delay(50);
 686:	82 e3       	ldi	r24, 0x32	; 50
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z5Delayj>
 68e:	e3 cf       	rjmp	.-58     	; 0x656 <_Z5Entryv+0x4>

00000690 <main>:



int main()
{
	Entry();
 690:	0e 94 29 03 	call	0x652	; 0x652 <_Z5Entryv>

00000694 <_GLOBAL__sub_I_Gpio>:
}
 694:	6f ef       	ldi	r22, 0xFF	; 255
 696:	7f ef       	ldi	r23, 0xFF	; 255
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 c4 02 	call	0x588	; 0x588 <_Z41__static_initialization_and_destruction_0ii>
 6a0:	08 95       	ret

000006a2 <_Z9PlaySoundhR11GPIOManagerh>:
 *  Author: 
 */ 
#include "GPIO.h"
#include "Timers.h"
void PlaySound(UINT8 number,GPIOManager& Gpio,const UINT8 PlayDurationMs)
{
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
	while(number > 255)
	{
		number /= 4;
	}

	    TCCR2A = (1 << COM2A0);               // Toggle OC2A on compare match
 6aa:	c0 eb       	ldi	r28, 0xB0	; 176
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
 6ae:	90 e4       	ldi	r25, 0x40	; 64
 6b0:	98 83       	st	Y, r25
	    TCCR2B = (1 << WGM22) | (1 << CS21);  // CTC mode, prescaler 8
 6b2:	01 eb       	ldi	r16, 0xB1	; 177
 6b4:	10 e0       	ldi	r17, 0x00	; 0
 6b6:	9a e0       	ldi	r25, 0x0A	; 10
 6b8:	f8 01       	movw	r30, r16
 6ba:	90 83       	st	Z, r25
	    OCR2A = number;                       // Set frequency (lower = higher pitch)
 6bc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

	    // Wait for sound duration
	    Delay(PlayDurationMs);
 6c0:	84 2f       	mov	r24, r20
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z5Delayj>

	    // Turn off the buzzer
	    TCCR2A &= ~((1 << COM2A0) | (1 << COM2A1)); // Stop toggling OC2A
 6c8:	88 81       	ld	r24, Y
 6ca:	8f 73       	andi	r24, 0x3F	; 63
 6cc:	88 83       	st	Y, r24
	    TCCR2B = 0;                                 // Stop timer
 6ce:	f8 01       	movw	r30, r16
 6d0:	10 82       	st	Z, r1
	    PORTB &= ~(1 << PB3);
 6d2:	85 b1       	in	r24, 0x05	; 5
 6d4:	87 7f       	andi	r24, 0xF7	; 247
 6d6:	85 b9       	out	0x05, r24	; 5
}
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	08 95       	ret

000006e2 <_Z7Elapsedv>:
	while(startingTime < MaxWaitTime)
	{
		startingTime = ElapsedMicro();
	}
	return;
}
 6e2:	f8 94       	cli
 6e4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timeoverflowstack>
 6e8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timeoverflowstack+0x1>
 6ec:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <timeoverflowstack+0x2>
 6f0:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <timeoverflowstack+0x3>
 6f4:	78 94       	sei
 6f6:	bc 01       	movw	r22, r24
 6f8:	cd 01       	movw	r24, r26
 6fa:	05 2e       	mov	r0, r21
 6fc:	5a e0       	ldi	r21, 0x0A	; 10
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	5a 95       	dec	r21
 708:	d1 f7       	brne	.-12     	; 0x6fe <_Z7Elapsedv+0x1c>
 70a:	50 2d       	mov	r21, r0
 70c:	28 ee       	ldi	r18, 0xE8	; 232
 70e:	33 e0       	ldi	r19, 0x03	; 3
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	0e 94 0c 04 	call	0x818	; 0x818 <__udivmodsi4>
 718:	ca 01       	movw	r24, r20
 71a:	b9 01       	movw	r22, r18
 71c:	08 95       	ret

0000071e <_Z5Delayj>:
 71e:	cf 92       	push	r12
 720:	df 92       	push	r13
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	7c 01       	movw	r14, r24
 728:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z7Elapsedv>
 72c:	9b 01       	movw	r18, r22
 72e:	ac 01       	movw	r20, r24
 730:	2e 0d       	add	r18, r14
 732:	3f 1d       	adc	r19, r15
 734:	41 1d       	adc	r20, r1
 736:	51 1d       	adc	r21, r1
 738:	69 01       	movw	r12, r18
 73a:	7a 01       	movw	r14, r20
 73c:	6c 15       	cp	r22, r12
 73e:	7d 05       	cpc	r23, r13
 740:	8e 05       	cpc	r24, r14
 742:	9f 05       	cpc	r25, r15
 744:	18 f4       	brcc	.+6      	; 0x74c <_Z5Delayj+0x2e>
 746:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z7Elapsedv>
 74a:	f8 cf       	rjmp	.-16     	; 0x73c <_Z5Delayj+0x1e>
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	08 95       	ret

00000756 <_Z17AutoConfigurePsc2v>:
	sei();														 //enables global interrupts
}

void AutoConfigurePsc2()
{
	TCCR2B |=   0x03;
 756:	e1 eb       	ldi	r30, 0xB1	; 177
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	83 60       	ori	r24, 0x03	; 3
 75e:	80 83       	st	Z, r24
 760:	08 95       	ret

00000762 <_Z10Timer2Initv>:
	uint32_t overflowPeriod_us = 1024;
	return	(ms * overflowPeriod_us);
}

void Timer2Init()
{
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
	TCCR2A |= 1 << COM2A1;										 //set non inverted mode
 766:	c0 eb       	ldi	r28, 0xB0	; 176
 768:	d0 e0       	ldi	r29, 0x00	; 0
 76a:	88 81       	ld	r24, Y
 76c:	80 68       	ori	r24, 0x80	; 128
 76e:	88 83       	st	Y, r24
	TCCR2A |= 1 << WGM21;										 //set fast PWM
 770:	88 81       	ld	r24, Y
 772:	82 60       	ori	r24, 0x02	; 2
 774:	88 83       	st	Y, r24
	TCCR2A |= 1 << WGM20;
 776:	88 81       	ld	r24, Y
 778:	81 60       	ori	r24, 0x01	; 1
 77a:	88 83       	st	Y, r24
	TCCR2B &= ~(1 << WGM22);
 77c:	e1 eb       	ldi	r30, 0xB1	; 177
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	87 7f       	andi	r24, 0xF7	; 247
 784:	80 83       	st	Z, r24
	TCNT2 = 0;													 //start counter from 0
 786:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	AutoConfigurePsc2();
 78a:	0e 94 ab 03 	call	0x756	; 0x756 <_Z17AutoConfigurePsc2v>
	PWMT2enabled = true;
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	TCCR2A &= ~((1 << COM2A0) | (1 << COM2A1));
 794:	88 81       	ld	r24, Y
 796:	8f 73       	andi	r24, 0x3F	; 63
 798:	88 83       	st	Y, r24
}
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	08 95       	ret

000007a0 <_Z11SetTimerPschhh>:
	TCCR2B |=   0x03;
}

void SetTimerPsc(UINT8 bit2 , UINT8 bit1, UINT8  bit0)
{
	if(bit0 > 1 || bit1 > 1 || bit2 > 1 )return;
 7a0:	42 30       	cpi	r20, 0x02	; 2
 7a2:	c0 f4       	brcc	.+48     	; 0x7d4 <_Z11SetTimerPschhh+0x34>
 7a4:	62 30       	cpi	r22, 0x02	; 2
 7a6:	b0 f4       	brcc	.+44     	; 0x7d4 <_Z11SetTimerPschhh+0x34>
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	a0 f4       	brcc	.+40     	; 0x7d4 <_Z11SetTimerPschhh+0x34>
	TCCR0B &= ~((1 << CS02) | (1 << CS01) | (1 << CS00));
 7ac:	95 b5       	in	r25, 0x25	; 37
 7ae:	98 7f       	andi	r25, 0xF8	; 248
 7b0:	95 bd       	out	0x25, r25	; 37
	TCCR0B |=  bit0 << CS00;
 7b2:	95 b5       	in	r25, 0x25	; 37
 7b4:	49 2b       	or	r20, r25
 7b6:	45 bd       	out	0x25, r20	; 37
	TCCR0B |=  bit1 << CS01;
 7b8:	95 b5       	in	r25, 0x25	; 37
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	69 2b       	or	r22, r25
 7c2:	65 bd       	out	0x25, r22	; 37
	TCCR0B |=  bit2 << CS02;
 7c4:	25 b5       	in	r18, 0x25	; 37
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	82 2b       	or	r24, r18
 7d2:	85 bd       	out	0x25, r24	; 37
 7d4:	08 95       	ret

000007d6 <_Z10Timer0Initv>:
	TCCR2A &= ~((1 << COM2A0) | (1 << COM2A1));
}

void Timer0Init()
{
	TCCR0A = 0;													 //Normal Mode
 7d6:	14 bc       	out	0x24, r1	; 36
	SetTimerPsc(TIMERKHZ250);									 //set clock to 250.000hz
 7d8:	41 e0       	ldi	r20, 0x01	; 1
 7da:	61 e0       	ldi	r22, 0x01	; 1
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z11SetTimerPschhh>
	TCNT0 = 0;													 //zero counter
 7e2:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);										 //enables interrupts and calls ISR(TIMED_OVF_vect) on overflow{}
 7e4:	ee e6       	ldi	r30, 0x6E	; 110
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	81 60       	ori	r24, 0x01	; 1
 7ec:	80 83       	st	Z, r24
	sei();														 //enables global interrupts
 7ee:	78 94       	sei
 7f0:	08 95       	ret

000007f2 <_Z8ClearBithh>:
 */ 
#include "utils.h"

UINT8 ClearBit(UINT8 OriginalByte, UINT8 bit)
{
	UINT8 mask = 1 << bit;
 7f2:	21 e0       	ldi	r18, 0x01	; 1
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <_Z8ClearBithh+0xa>
 7f8:	22 0f       	add	r18, r18
 7fa:	33 1f       	adc	r19, r19
 7fc:	6a 95       	dec	r22
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <_Z8ClearBithh+0x6>
	mask = ~mask;
 800:	20 95       	com	r18
	OriginalByte &= mask;
	return OriginalByte;
}
 802:	82 23       	and	r24, r18
 804:	08 95       	ret

00000806 <_Z6SetBithh>:

UINT8 SetBit(UINT8 OriginalByte, UINT8 bit)
{
	return OriginalByte |= (1 << bit);      //DDRB |= (1 << 4);     
 806:	21 e0       	ldi	r18, 0x01	; 1
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <_Z6SetBithh+0xa>
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	6a 95       	dec	r22
 812:	e2 f7       	brpl	.-8      	; 0x80c <_Z6SetBithh+0x6>
}
 814:	82 2b       	or	r24, r18
 816:	08 95       	ret

00000818 <__udivmodsi4>:
 818:	a1 e2       	ldi	r26, 0x21	; 33
 81a:	1a 2e       	mov	r1, r26
 81c:	aa 1b       	sub	r26, r26
 81e:	bb 1b       	sub	r27, r27
 820:	fd 01       	movw	r30, r26
 822:	0d c0       	rjmp	.+26     	; 0x83e <__udivmodsi4_ep>

00000824 <__udivmodsi4_loop>:
 824:	aa 1f       	adc	r26, r26
 826:	bb 1f       	adc	r27, r27
 828:	ee 1f       	adc	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	a2 17       	cp	r26, r18
 82e:	b3 07       	cpc	r27, r19
 830:	e4 07       	cpc	r30, r20
 832:	f5 07       	cpc	r31, r21
 834:	20 f0       	brcs	.+8      	; 0x83e <__udivmodsi4_ep>
 836:	a2 1b       	sub	r26, r18
 838:	b3 0b       	sbc	r27, r19
 83a:	e4 0b       	sbc	r30, r20
 83c:	f5 0b       	sbc	r31, r21

0000083e <__udivmodsi4_ep>:
 83e:	66 1f       	adc	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	1a 94       	dec	r1
 848:	69 f7       	brne	.-38     	; 0x824 <__udivmodsi4_loop>
 84a:	60 95       	com	r22
 84c:	70 95       	com	r23
 84e:	80 95       	com	r24
 850:	90 95       	com	r25
 852:	9b 01       	movw	r18, r22
 854:	ac 01       	movw	r20, r24
 856:	bd 01       	movw	r22, r26
 858:	cf 01       	movw	r24, r30
 85a:	08 95       	ret

0000085c <__tablejump2__>:
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	05 90       	lpm	r0, Z+
 862:	f4 91       	lpm	r31, Z
 864:	e0 2d       	mov	r30, r0
 866:	09 94       	ijmp

00000868 <_exit>:
 868:	f8 94       	cli

0000086a <__stop_program>:
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
